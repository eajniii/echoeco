plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.14'
	id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.project'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	//spring security 라이브러리
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation group: 'org.springframework.security', name: 'spring-security-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'	
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

//implementation 'mysql:mysql-connector-java'
	runtimeOnly 'com.h2database:h2'

	testImplementation 'io.projectreactor:reactor-test'
//	implementation 'org.springframework:spring-webmvc'

implementation 'io.jsonwebtoken:jjwt:0.9.1'
implementation 'javax.xml.bind:jaxb-api:2.3.1'

	//json 처리	
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	// implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
	// implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5'

	
	//jUnit
	// testImplementation 'org.junit.jupiter:junit-jupiter-api'
	// testImplementation 'org.junit.jupiter:junit-jupiter-engine'
	// testImplementation 'org.junit.jupiter:junit-jupiter-params'
}

tasks.named('test') {
	useJUnitPlatform()
}

def webappDir = "$projectDir/src/main/frontend"

sourceSets {
	main {
		resources {
			srcDirs = ["$webappDir/build", "$projectDir/src/main/resources"]
		}
	}
}

processResources {
	dependsOn "buildReact"
}

task buildReact(type: Exec) {
	dependsOn "installReact"
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
		if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
			commandLine "npm.cmd", "run-script", "build"
		} else {
			commandLine "npm", "run-script", "build"
		}
}

task installReact(type: Exec) {
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install'
	} else {
		commandLine "npm", "audit", "fix"
		commandLine 'npm', 'install'
	}
}